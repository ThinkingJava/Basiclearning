工厂模式：根据传入参数创建动态决定生成那个类。
观察者模式： 定义了对象间的一对多的依赖关系，以便一个对象的状态方式变化时，所依赖的它的对象发生更新是得到通知并自动刷新。
适配器模式： 将一个类的接口转换成客户希望的另一个接口。适配器模式让那些接口不兼容的类可以一起工作。
代理模式：提供了对目标对象另外的访问方式，即通过代理对象访问目标对象。




适配器模式例子：
我手中有个ps2插头的设备，但是主机上只有usb插头的插口，怎么办呢？弄个转换器，将ps2插头转换成为USB插头就可以使用了。

接口Ps2：描述ps2接口格式

接口Usb：描述USB接口格式

类Usber：是接口Usb的实现类，是具体的USB接口格式

Adapter：用于将ps2接口格式转换成为USB接口格式


观察者模式例子：
有一个微信公众号服务，不定时发布一些消息，关注公众号就可以收到推送消息，取消关注就收不到推送消息。

接口Observerable: 抽象被观察者接口  registerObserver(Observer o);removeObserver(Observer o); notifyObserver();setInfomation(String message);

接口Observer: 定义一个抽象观察者接口 updateMessage(String message);

类WechatServer:定义被观察者，实现了Observerable接口，对Observerable接口的三个方法进行了具体实现，同时有一个List集合，用以保存注册的观察者，等需要通知观察者时，遍历该集合即可。

类User：定义具体观察者，微信公众号的具体观察者为用户User; updateMessage(String message);

代理模式例子：
接口IUserDao: save()

类UserDao：接口实现，目标对象
public void save() {
        System.out.println("----已经保存数据!----");
    }
类UserDaoProxy:代理对象,静态代理
public void save() {
        System.out.println("开始事务...");
        target.save();//执行目标对象的方法
        System.out.println("提交事务...");
    }


